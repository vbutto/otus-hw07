import json
import os
import logging
import requests
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def handler(event, context):
    """
    Function 2: Weather Forecast
    - –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
    - –û–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ Yandex Weather API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –ø–æ–≥–æ–¥—ã
    """
    try:
        # –ü–∞—Ä—Å–∏–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if isinstance(event.get('body'), str):
            body = json.loads(event['body'])
        else:
            body = event.get('body', {})
        
        lat = body.get('lat')
        lon = body.get('lon')
        days = int(body.get('days', 5))
        
        if lat is None or lon is None:
            return {
                'statusCode': 400,
                'body': json.dumps({
                    'error': 'Latitude and longitude parameters are required'
                })
            }
        
        logger.info(f"Getting weather forecast for coordinates: {lat}, {lon}, days: {days}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
        forecast_data = get_weather_forecast(lat, lon, days)
        
        return {
            'statusCode': 200,
            'body': json.dumps(forecast_data, ensure_ascii=False)
        }
        
    except Exception as e:
        logger.error(f"Error in weather forecast function: {str(e)}")
        return {
            'statusCode': 500,
            'body': json.dumps({
                'error': 'Internal server error',
                'details': str(e)
            })
        }

def get_weather_forecast(lat, lon, days):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –∏–∑ Yandex Weather API –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Yandex Weather API
        api_key = os.environ.get('WEATHER_API_KEY')
        
        if not api_key:
            # –ï—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ
            logger.warning("No Yandex Weather API key provided, returning mock data")
            return generate_mock_forecast_by_coords(lat, lon, days)
        
        # URL Yandex Weather API
        weather_url = "https://api.weather.yandex.ru/v2/forecast"
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        headers = {
            'X-Yandex-API-Key': api_key
        }
        
        params = {
            'lat': lat,
            'lon': lon,
            'lang': 'ru_RU',
            'limit': min(days, 7),  # Yandex API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ 7 –¥–Ω–µ–π
            'hours': False,  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã
            'extra': False   # –ë–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        }
        
        response = requests.get(weather_url, headers=headers, params=params, timeout=10)
        
        if response.status_code != 200:
            logger.error(f"Yandex Weather API error: {response.status_code}")
            if response.status_code == 403:
                logger.error("API key invalid or rate limit exceeded")
            return generate_mock_forecast_by_coords(lat, lon, days)
        
        weather_data = response.json()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Yandex Weather API
        forecast = process_yandex_weather_data(weather_data, days)
        
        return forecast
        
    except requests.RequestException as e:
        logger.error(f"Request error: {str(e)}")
        return generate_mock_forecast_by_coords(lat, lon, days)
    except Exception as e:
        logger.error(f"Error getting weather forecast: {str(e)}")
        return generate_mock_forecast_by_coords(lat, lon, days)

def process_yandex_weather_data(data, requested_days):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç Yandex Weather API"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏
        location_info = data.get('info', {})
        location_name = f"{location_info.get('lat', 0):.3f}, {location_info.get('lon', 0):.3f}"
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞
        if 'tzinfo' in location_info:
            tz_name = location_info['tzinfo'].get('name', '')
            if '/' in tz_name:
                location_name = tz_name.split('/')[-1].replace('_', ' ')
        
        # –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
        fact = data.get('fact', {})
        
        # –ü—Ä–æ–≥–Ω–æ–∑—ã –ø–æ –¥–Ω—è–º
        forecasts = data.get('forecasts', [])
        forecast_list = []
        
        for i, day_forecast in enumerate(forecasts[:requested_days]):
            date_str = day_forecast.get('date', '')
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–Ω–µ
            day_info = day_forecast.get('parts', {}).get('day', {})
            
            # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
            temp_avg = day_info.get('temp_avg')
            temp_min = day_info.get('temp_min') 
            temp_max = day_forecast.get('parts', {}).get('day_short', {}).get('temp_max')
            feels_like = day_info.get('feels_like', temp_avg)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ fact –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            if i == 0 and fact:
                temp_avg = fact.get('temp', temp_avg)
                feels_like = fact.get('feels_like', feels_like)
            
            # –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            condition = day_info.get('condition', 'clear')
            condition_description = get_condition_description(condition)
            
            forecast_item = {
                'date': date_str,
                'temperature': {
                    'day': int(temp_avg) if temp_avg is not None else 0,
                    'min': int(temp_min) if temp_min is not None else int(temp_avg or 0) - 3,
                    'max': int(temp_max) if temp_max is not None else int(temp_avg or 0) + 3,
                    'feels_like': int(feels_like) if feels_like is not None else int(temp_avg or 0)
                },
                'weather': {
                    'main': condition.title(),
                    'description': condition_description,
                    'icon': get_weather_icon_from_condition(condition)
                },
                'humidity': day_info.get('humidity', 50),
                'pressure': day_info.get('pressure_mm', 760),
                'wind_speed': day_info.get('wind_speed', 0),
                'clouds': get_cloudiness_from_condition(condition),
                'wind_direction': day_info.get('wind_dir', 'n')
            }
            
            forecast_list.append(forecast_item)
        
        return {
            'location': location_name,
            'country': 'RU',
            'coordinates': f"{location_info.get('lat', 0)}, {location_info.get('lon', 0)}",
            'forecast_days': len(forecast_list),
            'forecast': forecast_list,
            'generated_at': datetime.now().isoformat(),
            'data_source': 'Yandex Weather API'
        }
        
    except Exception as e:
        logger.error(f"Error processing Yandex Weather data: {str(e)}")
        return generate_mock_forecast_by_coords(
            data.get('info', {}).get('lat', 0),
            data.get('info', {}).get('lon', 0),
            requested_days
        )

def get_condition_description(condition):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –∫–æ–¥—ã –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π Yandex API –≤ –æ–ø–∏—Å–∞–Ω–∏—è"""
    conditions = {
        'clear': '—è—Å–Ω–æ',
        'partly-cloudy': '–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ', 
        'cloudy': '–æ–±–ª–∞—á–Ω–æ',
        'overcast': '–ø–∞—Å–º—É—Ä–Ω–æ',
        'light-rain': '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å',
        'rain': '–¥–æ–∂–¥—å',
        'heavy-rain': '—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å',
        'showers': '–ª–∏–≤–µ–Ω—å',
        'wet-snow': '–¥–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º',
        'light-snow': '–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥',
        'snow': '—Å–Ω–µ–≥',
        'snow-showers': '—Å–Ω–µ–≥–æ–ø–∞–¥',
        'hail': '–≥—Ä–∞–¥',
        'thunderstorm': '–≥—Ä–æ–∑–∞',
        'thunderstorm-with-rain': '–¥–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π',
        'thunderstorm-with-hail': '–≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º'
    }
    return conditions.get(condition, condition)

def get_weather_icon_from_condition(condition):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç emoji –∏–∫–æ–Ω–∫—É –¥–ª—è –ø–æ–≥–æ–¥–Ω–æ–≥–æ —É—Å–ª–æ–≤–∏—è"""
    icons = {
        'clear': '‚òÄÔ∏è',
        'partly-cloudy': '‚õÖ',
        'cloudy': '‚òÅÔ∏è', 
        'overcast': '‚òÅÔ∏è',
        'light-rain': 'üå¶Ô∏è',
        'rain': 'üåßÔ∏è',
        'heavy-rain': 'üåßÔ∏è',
        'showers': 'üåßÔ∏è',
        'wet-snow': 'üå®Ô∏è',
        'light-snow': '‚ùÑÔ∏è',
        'snow': '‚ùÑÔ∏è',
        'snow-showers': 'üå®Ô∏è',
        'hail': 'üå®Ô∏è',
        'thunderstorm': '‚õàÔ∏è',
        'thunderstorm-with-rain': '‚õàÔ∏è',
        'thunderstorm-with-hail': '‚õàÔ∏è'
    }
    return icons.get(condition, 'üå§Ô∏è')

def get_cloudiness_from_condition(condition):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω—É—é –æ–±–ª–∞—á–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ª–æ–≤–∏–π"""
    cloudiness = {
        'clear': 10,
        'partly-cloudy': 30,
        'cloudy': 70,
        'overcast': 100,
        'light-rain': 80,
        'rain': 90,
        'heavy-rain': 100,
        'showers': 90,
        'wet-snow': 90,
        'light-snow': 80,
        'snow': 90,
        'snow-showers': 100,
        'hail': 100,
        'thunderstorm': 90,
        'thunderstorm-with-rain': 95,
        'thunderstorm-with-hail': 100
    }
    return cloudiness.get(condition, 50)

def generate_mock_forecast_by_coords(lat, lon, days):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç mock –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    logger.info(f"Generating mock forecast for coordinates {lat}, {lon}")
    
    import random
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (–æ—á–µ–Ω—å —É–ø—Ä–æ—â–µ–Ω–Ω–æ)
    location_name = f"Location ({lat:.2f}, {lon:.2f})"
    
    # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∏—Ä–æ—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ–¥–∞
    import datetime
    month = datetime.datetime.now().month
    
    if abs(lat) > 60:
        base_temp = random.randint(-15, 5) if month in [11,12,1,2,3] else random.randint(-5, 15)
    elif abs(lat) > 40:
        base_temp = random.randint(-5, 15) if month in [11,12,1,2,3] else random.randint(5, 25)
    else:
        base_temp = random.randint(10, 25) if month in [11,12,1,2,3] else random.randint(20, 35)
    
    forecast_list = []
    
    weather_conditions = [
        {'condition': 'clear', 'description': '—è—Å–Ω–æ', 'icon': '‚òÄÔ∏è'},
        {'condition': 'partly-cloudy', 'description': '–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ', 'icon': '‚õÖ'},
        {'condition': 'cloudy', 'description': '–æ–±–ª–∞—á–Ω–æ', 'icon': '‚òÅÔ∏è'},
        {'condition': 'rain', 'description': '–¥–æ–∂–¥—å', 'icon': 'üåßÔ∏è'},
        {'condition': 'snow', 'description': '—Å–Ω–µ–≥', 'icon': '‚ùÑÔ∏è'} if base_temp < 5 else {'condition': 'clear', 'description': '—è—Å–Ω–æ', 'icon': '‚òÄÔ∏è'}
    ]
    
    for i in range(days):
        date = datetime.datetime.now() + timedelta(days=i)
        temp_variation = random.randint(-5, 5)
        temp = base_temp + temp_variation
        
        weather = random.choice(weather_conditions)
        
        forecast_list.append({
            'date': date.strftime('%Y-%m-%d'),
            'temperature': {
                'day': temp,
                'min': temp - random.randint(2, 5),
                'max': temp + random.randint(2, 5),
                'feels_like': temp + random.randint(-2, 2)
            },
            'weather': {
                'main': weather['condition'].title(),
                'description': weather['description'],
                'icon': weather['icon']
            },
            'humidity': random.randint(40, 80),
            'pressure': random.randint(745, 770),
            'wind_speed': round(random.uniform(1.0, 8.0), 1),
            'clouds': get_cloudiness_from_condition(weather['condition']),
            'wind_direction': random.choice(['n', 'ne', 'e', 'se', 's', 'sw', 'w', 'nw'])
        })
    
    return {
        'location': location_name,
        'country': 'RU',
        'coordinates': f"{lat}, {lon}",
        'forecast_days': days,
        'forecast': forecast_list,
        'generated_at': datetime.now().isoformat(),
        'data_source': 'Mock data –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏',
        'note': '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –ø–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á Yandex Weather –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'
    }